import warnings
from LysQt.QtCore import pyqtSignal
from lys.errors import NotImplementedWarning

from .SaveCanvas import saveCanvas
from .AnnotationData import AnnotationData


class TextAnnotation(AnnotationData):
    """
    Interface to access text annotations in canvas.

    *TextAnnotation* is usually generated by addText method in canvas.

    Args:
        canvas(Canvas): canvas to which the text annotation is added.
        text(str): The text of the annotation.
        axis('BottomLeft', 'BottomRight', 'TopLeft', or 'TopRight'): The axis to which the text annotation is added.

    Example::

        from lys import display
        g = display()
        line = g.canvas.addText('test')
    """

    edited = pyqtSignal()
    """Pyqtsignal that is emitted when the text is edited."""

    def __init__(self, canvas, text, pos, axis):
        super().__init__(canvas, "test", axis)
        self._text = text
        self._pos = pos

    @saveCanvas
    def setText(self, text):
        """
        Set the text of the annotation.

        Args:
            text(str): The text of the annotation.
        """
        self._setText(text)
        self._text = text

    def getText(self):
        """
        Get the text of the annotation.

        Return:
            str: The text of the annotation.
        """
        return self._text

    @saveCanvas
    def setPosition(self, pos):
        """
        Set the position of the annotation.

        Args:
            pos(length 2 sequence): The position of the annotation.
        """
        self._setText(pos)
        self._pos = pos

    def getPosition(self):
        """
        Get the position of the annotation.

        Args:
            length 2 sequence: The position of the annotation.
        """
        return self._pos

    def _setText(self, text):
        warnings.warn(str(type(self)) + " does not implement _setText(text) method.", NotImplementedWarning)
