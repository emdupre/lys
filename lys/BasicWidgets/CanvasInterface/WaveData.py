import warnings
from lys import filters
from lys.errors import NotImplementedWarning

from LysQt.QtCore import QObject, pyqtSignal
from .SaveCanvas import CanvasPart, saveCanvas


class WaveData(CanvasPart):
    modified = pyqtSignal(QObject)
    appearanceSet = pyqtSignal(dict)

    def __init__(self, canvas, obj):
        super().__init__(canvas)
        self.appearance = {}

    def __del__(self):
        self.wave.modified.disconnect(self._emitModified)

    def setMetaData(self, wave, axis, offset=(0, 0, 0, 0), filter=None, filteredWave=None):
        self.wave = wave
        self.wave.modified.connect(self._emitModified)
        self.axis = axis
        self.offset = offset
        self.filter = filter
        if filteredWave is not None:
            self.filteredWave = filteredWave
        else:
            self.filteredWave = wave

    def _emitModified(self):
        self.modified.emit(self)

    def _update(self):
        self.filteredWave = self._filteredWave(self.wave, self.offset, self.filter)
        self._updateData()

    def _filteredWave(self, w, offset, filter):
        if filter is None:
            filt = filters.Filters([filters.OffsetFilter(offset)])
        else:
            filt = filter + filters.OffsetFilter(offset)
        return filt.execute(w)

    @saveCanvas
    def setVisible(self, visible):
        self._setVisible(visible)
        self.appearance['Visible'] = visible

    def getVisible(self):
        return self.appearance.get('Visible', True)

    def setOffset(self, offset):
        self.offset = offset
        self.modified.emit(self)

    def getOffset(self):
        return self.offset

    def saveAppearance(self):
        """
        Save appearance from dictionary.

        Users can save/load appearance of data by save/loadAppearance methods.

        Return:
            dict: dictionary that include all appearance information.
        """
        return dict(self.appearance)

    @saveCanvas
    def loadAppearance(self, appearance):
        """
        Load appearance from dictionary.

        Users can save/load appearance of data by save/loadAppearance methods.

        Args:
            appearance(dict): dictionary that include all appearance information, which is usually generated by :meth:`saveAppearance` method.
        """
        self.setVisible(appearance.get('Visible', True))
        self.appearanceSet.emit(appearance)

    def _setVisible(self, visible):
        warnings.warn(str(type(self)) + " does not implement _setVisible(visible) method.", NotImplementedWarning)

    def _updateData(self):
        raise NotImplementedError(str(type(self)) + " does not implement _updateData() method.")
