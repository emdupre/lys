import warnings
from LysQt.QtCore import pyqtSignal
from lys.errors import NotImplementedWarning

from .SaveCanvas import saveCanvas
from .AnnotationData import AnnotationWithLine


class RectAnnotation(AnnotationWithLine):
    """
    Interface to access rectangle annotations in canvas.

    *RectAnnotation* is usually generated by addRectAnnotation method in canvas.

    Several methods related to the appearance of line is inherited from :class:`.AnnotationData.AnnotationWithLine`

    Args:
        canvas(Canvas): canvas to which the line annotation is added.
        pos(length 2 sequence): The position of the rect annotation in the form of (x, y).
        size(length 2 sequence): The size of the rect annotation in the form of (width, height).
        axis('BottomLeft', 'BottomRight', 'TopLeft', or 'TopRight'): The axis to which the line annotation is added.

    Example::

        from lys import display
        g = display()
        rect = g.canvas.addRectAnnotation()
        rect.setLineColor("#ff0000")
    """
    changed = pyqtSignal()
    """PyqtSignal that is emitted when the rectangle is changed."""

    def __init__(self, canvas, pos, size, axis):
        super().__init__(canvas, "test", axis)
        self._pos = pos
        self._size = size

    @saveCanvas
    def setRegion(self, region):
        """
        Set region of the rectangle.

        Args:
            region(2*2 sequence): The region of rectangle in the form of [(x1, x2), (y1, y2)]
        """
        self._setPosition(min(*region[0]), min(*region[1]))
        self._setSize(max(*region[0]) - min(*region[0]), max(*region[1]) - min(*region[1]))
        self._pos = (min(*region[0]), min(*region[1]))
        self._size = (max(*region[0]) - min(*region[0]), max(*region[1]) - min(*region[1]))

    def getPosition(self):
        """
        Get position of the rectangle.

        Return:
            length 2 sequence: The position of rectangle in the form of (x, y)
        """
        return self._pos

    def getSize(self):
        """
        Get size of the rectangle.

        Return:
            length 2 sequence: The size of rectangle in the form of (width, height)
        """
        return self._size

    def _setPosition(self, pos):
        warnings.warn(str(type(self)) + " does not implement _setPosition(pos) method.", NotImplementedWarning)

    def _setSize(self, size):
        warnings.warn(str(type(self)) + " does not implement _setSize(size) method.", NotImplementedWarning)
