import warnings
from LysQt.QtCore import pyqtSignal
from lys.errors import NotImplementedWarning

from .SaveCanvas import saveCanvas
from .AnnotationData import _AnnotationData


class LineAnnotation(_AnnotationData):
    """
    Interface to access line annotations in canvas.

    *LineAnnotation* is usually generated by addLineAnnotation method in canvas.

    Args:
        canvas(Canvas): canvas to which the line annotation is added.
        pos(2 * 2 sequence): The position of the line annotation.
        axis('BottomLeft', 'BottomRight', 'TopLeft', or 'TopRight'): The axis to which the line annotation is added.

    Example::

        from lys import display
        g = display()
        line = g.canvas.addLineAnnotation()
        line.setColor("#ff0000")
    """
    positionChanged = pyqtSignal()
    """PyqtSignal that is emitted when the position of the line is changed."""

    def __init__(self, canvas, pos, axis):
        super().__init__(canvas, "test", axis)
        self._pos = pos

    @saveCanvas
    def setPosition(self, pos):
        """
        Set the position of the line.

        Args:
            pos(2*2 sequence): The position of the line in the form of [(x0,y0),(x1,y1)].
        """
        self._setPosition(pos)
        self._pos = pos

    def getPosition(self):
        """
        Get the position of the line.

        Return:
            2*2 sequence: The position of the line in the form of [(x0,y0),(x1,y1)].
        """
        return self._pos

    @saveCanvas
    def setColor(self, color):
        """
        Set the color of the line.

        Args:
            color(str): The color string such as '#ff0000'
        """
        self._setColor(color)
        self._appearance['LineColor'] = color

    def getColor(self):
        """
        Get the color of the line.

        Return:
            str: The color string such as '#ff0000'
        """
        return self._appearance['LineColor']

    @ saveCanvas
    def setStyle(self, style):
        """
        Set the style of the line.

        Args:
            style('solid', 'dashed', 'dashdot', 'dotted', or 'none'): The line style.
        """
        self._setStyle(style)
        self._appearance['LineStyle'] = style

    def getStyle(self):
        """
        Get the style of the line.

        Return:
            str: The line style ('solid', 'dashed', 'dashdot', 'dotted', or 'none').
        """
        return self._appearance['LineStyle']

    @ saveCanvas
    def setWidth(self, width):
        """
        Set the width of the line.

        Args:
            width(int): The width of the line.
        """
        self._setWidth(width)
        self._appearance['LineWidth'] = width

    def getWidth(self):
        """
        Get the width of the line.

        Return:
            int: The width of the line.
        """
        return self._appearance['LineWidth']

    def _loadAppearance(self, appearance):
        self.setColor(appearance.get('LineColor', '#000000'))
        self.setWidth(appearance.get('LineWidth', 1))
        self.setStyle(appearance.get('LineStyle', 'solid'))

    def _setPosition(self, pos):
        warnings.warn(str(type(self)) + " does not implement _setPosition(pos) method.", NotImplementedWarning)

    def _setColor(self, color):
        warnings.warn(str(type(self)) + " does not implement _setColor(color) method.", NotImplementedWarning)

    def _setWidth(self, width):
        warnings.warn(str(type(self)) + " does not implement _setWidth(width) method.", NotImplementedWarning)

    def _setStyle(self, color):
        warnings.warn(str(type(self)) + " does not implement _setStyle(style) method.", NotImplementedWarning)


class InfiniteLineAnnotation(_AnnotationData):
    """
    Interface to access infinite line annotations in canvas.

    *InfiniteLineAnnotation* is usually generated by addInfiniteLineAnnotation method in canvas.

    Args:
        canvas(Canvas): canvas to which the line annotation is added.
        pos(float): The position of the line annotation.
        type('vertical' or 'horizontal'): The direction of the infinite line.
        axis('BottomLeft', 'BottomRight', 'TopLeft', or 'TopRight'): The axis to which the line annotation is added.

    Example::

        from lys import display
        g = display()
        line = g.canvas.addInfiniteLineAnnotation()
        line.setColor("#ff0000")
    """
    positionChanged = pyqtSignal()

    def __init__(self, canvas, pos, type, axis):
        super().__init__(canvas, "test", axis)
        self._pos = pos
        self._type = type

    @saveCanvas
    def setPosition(self, pos):
        """
        Set the position of the line.

        Args:
            pos(float): The position of the line.
        """
        self._setPosition(pos)
        self._pos = pos

    def getPosition(self):
        """
        Get the position of the line.

        Args:
            float: The position of the line.
        """
        return self._pos

    def getType(self):
        return self._type

    @saveCanvas
    def setColor(self, color):
        """
        Set the color of the line.

        Args:
            color(str): The color string such as '#ff0000'
        """
        self._setColor(color)
        self._appearance['LineColor'] = color

    def getColor(self):
        """
        Get the color of the line.

        Return:
            str: The color string such as '#ff0000'
        """
        return self._appearance['LineColor']

    @ saveCanvas
    def setStyle(self, style):
        """
        Set the style of the line.

        Args:
            style('solid', 'dashed', 'dashdot', 'dotted', or 'none'): The line style.
        """
        self._setStyle(style)
        self._appearance['LineStyle'] = style

    def getStyle(self):
        """
        Get the style of the line.

        Return:
            str: The line style ('solid', 'dashed', 'dashdot', 'dotted', or 'none').
        """
        return self._appearance['LineStyle']

    @ saveCanvas
    def setWidth(self, width):
        """
        Set the width of the line.

        Args:
            width(int): The width of the line.
        """
        self._setWidth(width)
        self._appearance['LineWidth'] = width

    def getWidth(self):
        """
        Get the width of the line.

        Return:
            int: The width of the line.
        """
        return self._appearance['LineWidth']

    def _loadAppearance(self, appearance):
        self.setColor(appearance.get('LineColor', '#000000'))
        self.setWidth(appearance.get('LineWidth', 1))
        self.setStyle(appearance.get('LineStyle', 'solid'))

    def _setPosition(self, pos):
        warnings.warn(str(type(self)) + " does not implement _setPosition(pos) method.", NotImplementedWarning)

    def _setColor(self, color):
        warnings.warn(str(type(self)) + " does not implement _setColor(color) method.", NotImplementedWarning)
